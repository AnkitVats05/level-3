Building an e-commerce website with features like product browsing, shopping cart management, user authentication, and payment integration requires a combination of frontend and backend technologies. Below is a detailed guide with code snippets to help you create this application using React, Node.js, and MongoDB.

### Project Structure

1. **Frontend (React)**
   - Components for product listing, product details, shopping cart, user authentication, and checkout.
   - React Router for navigation.
   - Axios for API requests.
   - State management (Context API or Redux) for managing cart and user data.

2. **Backend (Node.js/Express)**
   - Set up an Express server with routes for products, users, and orders.
   - MongoDB for data storage.
   - Payment integration using a service like Stripe.

3. **Database**
   - MongoDB collections for users, products, and orders.

### Step 1: Set Up the Frontend

**Initialize React App**

```bash
npx create-react-app ecommerce
cd ecommerce
npm install axios react-router-dom
```

**Basic App Structure:**

```javascript
// src/App.js
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import Home from './components/Home';
import ProductDetails from './components/ProductDetails';
import Cart from './components/Cart';
import Checkout from './components/Checkout';
import Login from './components/Login';
import Register from './components/Register';

function App() {
  return (
    <Router>
      <Switch>
        <Route path="/" exact component={Home} />
        <Route path="/product/:id" component={ProductDetails} />
        <Route path="/cart" component={Cart} />
        <Route path="/checkout" component={Checkout} />
        <Route path="/login" component={Login} />
        <Route path="/register" component={Register} />
      </Switch>
    </Router>
  );
}

export default App;
```

**Home Component:**

```javascript
// src/components/Home.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';

const Home = () => {
  const [products, setProducts] = useState([]);

  useEffect(() => {
    const fetchProducts = async () => {
      const response = await axios.get('/api/products');
      setProducts(response.data);
    };
    fetchProducts();
  }, []);

  return (
    <div>
      <h1>Products</h1>
      <div>
        {products.map(product => (
          <div key={product._id}>
            <Link to={`/product/${product._id}`}>
              <h2>{product.name}</h2>
              <p>${product.price}</p>
            </Link>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Home;
```

### Step 2: Product Details Component

```javascript
// src/components/ProductDetails.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useParams } from 'react-router-dom';

const ProductDetails = () => {
  const { id } = useParams();
  const [product, setProduct] = useState(null);

  useEffect(() => {
    const fetchProduct = async () => {
      const response = await axios.get(`/api/products/${id}`);
      setProduct(response.data);
    };
    fetchProduct();
  }, [id]);

  if (!product) return <div>Loading...</div>;

  return (
    <div>
      <h1>{product.name}</h1>
      <p>${product.price}</p>
      <p>{product.description}</p>
      <button>Add to Cart</button>
    </div>
  );
};

export default ProductDetails;
```

### Step 3: Shopping Cart Component

```javascript
// src/components/Cart.js
import React, { useContext } from 'react';
import { CartContext } from '../context/CartContext';

const Cart = () => {
  const { cartItems, removeFromCart } = useContext(CartContext);

  return (
    <div>
      <h1>Your Cart</h1>
      {cartItems.length === 0 ? (
        <p>Your cart is empty.</p>
      ) : (
        <ul>
          {cartItems.map(item => (
            <li key={item.id}>
              {item.name} - ${item.price}
              <button onClick={() => removeFromCart(item.id)}>Remove</button>
            </li>
          ))}
        </ul>
      )}
      <button>Proceed to Checkout</button>
    </div>
  );
};

export default Cart;
```

### Step 4: User Authentication Components

**Login Component:**

```javascript
// src/components/Login.js
import React, { useState } from 'react';
import axios from 'axios';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    const response = await axios.post('/api/auth/login', { email, password });
    // Handle login success (e.g., store token)
  };

  return (
    <form onSubmit={handleSubmit}>
      <input type="email" placeholder="Email" value={email} onChange={(e) => setEmail(e.target.value)} />
      <input type="password" placeholder="Password" value={password} onChange={(e) => setPassword(e.target.value)} />
      <button type="submit">Login</button>
    </form>
  );
};

export default Login;
```

### Step 5: Checkout Component

```javascript
// src/components/Checkout.js
import React from 'react';

const Checkout = () => {
  const handleCheckout = () => {
    // Integrate with payment gateway (e.g., Stripe)
  };

  return (
    <div>
      <h1>Checkout</h1>
      <button onClick={handleCheckout}>Pay Now</button>
    </div>
  );
};

export default Checkout;
```

### Step 6: Set Up the Backend

**Initialize the Backend**

```bash
mkdir server
cd server
npm init -y
npm install express mongoose cors body-parser bcryptjs jsonwebtoken stripe
```

**Basic Server Setup:**

```javascript
// server/index.js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
const User = require('./models/User'); // Define User model
const Product = require('./models/Product'); // Define Product model
const Order = require('./models/Order'); // Define Order model

const app = express();
app.use(cors());
app.use(bodyParser.json());

mongoose.connect('mongodb://localhost:27017/ecommerce', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Routes
app.get('/api/products', async (req, res) => {
  const products = await Product.find();
  res.json(products);
});

app.get('/api/products/:id', async (req, res) => {
  const product = await Product.findById(req.params.id);
  res.json(product);
});

// User authentication routes
app.post('/api/auth/login', async (req, res) => {
  // Implement login logic
});

app.post('/api/auth/register', async (req, res) => {
  // Implement registration logic
});

// Checkout and payment integration
app.post('/api/checkout', async (req, res) => {
  // Implement payment logic using Stripe
});

// Start server
app.listen(5000, () => {
  console.log('Server is running on port 5000');
});
```

### Step 7: User and Product Models

**User Model:**

```javascript
// server/models/User.js
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
});

module.exports = mongoose.model('User', userSchema);
```

**Product Model:**

```javascript
// server/models/Product.js
const mongoose = require('mongoose');

const productSchema = new mongoose.Schema({
  name: { type: String, required: true },
  price: { type: Number, required: true },
  description: { type: String, required: true },
});

module.exports = mongoose.model('Product', productSchema);
```

### Step 8: Payment Integration with Stripe

To handle payments, you need to set up a Stripe account and use its API. 

**Install Stripe on the Server:**

```bash
npm install stripe
```

**Integrate Stripe in Checkout Route:**

```javascript
const stripe = require('stripe')('your-stripe-secret-key');

// In the /api/checkout route
app.post('/api/checkout', async (req, res) => {
  const { items } = req.body;
  
  // Create a checkout session
  const session = await stripe.checkout.sessions.create({
    payment_method_types: ['card'],
    line_items: items.map(item => ({
      price_data: {
        currency: 'usd',
        product_data: {
          name: item.name,
        },
        unit_amount: item.price * 100, // amount in cents
      },
      quantity: item.quantity,
    })),
    mode: 'payment',
    success_url: 'http://localhost:3000/success',
    cancel_url: 'http://localhost:3000/cancel',
  });

  res.json({ id: session.id });
});
```

### Step 9: Mobile Responsiveness

Use CSS frameworks like Bootstrap or
