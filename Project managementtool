Creating a project management tool involves several components, including user authentication, project creation, task assignment, deadline setting, and progress tracking. Below is a detailed guide with code snippets to help you build this application using React, Node.js, and either MongoDB or PostgreSQL.

### Project Structure

1. **Frontend (React)**
   - Components for project listing, project details, task management, and user authentication.
   - React Router for navigation.
   - State management (Context API or Redux) for managing user and project data.

2. **Backend (Node.js/Express)**
   - Set up an Express server with routes for projects, tasks, and user authentication.
   - Use MongoDB or PostgreSQL for data storage.

3. **Database**
   - Collections or tables for users, projects, and tasks.

### Step 1: Set Up the Frontend

**Initialize React App**

```bash
npx create-react-app project-management
cd project-management
npm install axios react-router-dom
```

**Basic App Structure:**

```javascript
// src/App.js
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import Home from './components/Home';
import ProjectDetails from './components/ProjectDetails';
import CreateProject from './components/CreateProject';
import Login from './components/Login';
import Register from './components/Register';

function App() {
  return (
    <Router>
      <Switch>
        <Route path="/" exact component={Home} />
        <Route path="/project/:id" component={ProjectDetails} />
        <Route path="/create" component={CreateProject} />
        <Route path="/login" component={Login} />
        <Route path="/register" component={Register} />
      </Switch>
    </Router>
  );
}

export default App;
```

### Step 2: Home Component

```javascript
// src/components/Home.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';

const Home = () => {
  const [projects, setProjects] = useState([]);

  useEffect(() => {
    const fetchProjects = async () => {
      const response = await axios.get('/api/projects');
      setProjects(response.data);
    };
    fetchProjects();
  }, []);

  return (
    <div>
      <h1>Project Management Tool</h1>
      <Link to="/create">Create a New Project</Link>
      <div>
        {projects.map(project => (
          <div key={project._id}>
            <Link to={`/project/${project._id}`}>
              <h2>{project.name}</h2>
              <p>{project.description}</p>
            </Link>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Home;
```

### Step 3: Create Project Component

```javascript
// src/components/CreateProject.js
import React, { useState } from 'react';
import axios from 'axios';

const CreateProject = () => {
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    await axios.post('/api/projects', { name, description });
    alert('Project created!');
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        placeholder="Project Name"
        value={name}
        onChange={(e) => setName(e.target.value)}
        required
      />
      <textarea
        placeholder="Project Description"
        value={description}
        onChange={(e) => setDescription(e.target.value)}
        required
      />
      <button type="submit">Create Project</button>
    </form>
  );
};

export default CreateProject;
```

### Step 4: Project Details Component

```javascript
// src/components/ProjectDetails.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useParams } from 'react-router-dom';

const ProjectDetails = () => {
  const { id } = useParams();
  const [project, setProject] = useState(null);
  const [taskName, setTaskName] = useState('');
  const [taskDeadline, setTaskDeadline] = useState('');

  useEffect(() => {
    const fetchProject = async () => {
      const response = await axios.get(`/api/projects/${id}`);
      setProject(response.data);
    };
    fetchProject();
  }, [id]);

  const handleAddTask = async (e) => {
    e.preventDefault();
    await axios.post(`/api/projects/${id}/tasks`, { name: taskName, deadline: taskDeadline });
    setTaskName('');
    setTaskDeadline('');
    // Optionally fetch project again to update tasks
  };

  if (!project) return <div>Loading...</div>;

  return (
    <div>
      <h1>{project.name}</h1>
      <p>{project.description}</p>
      <h2>Tasks</h2>
      <form onSubmit={handleAddTask}>
        <input
          type="text"
          placeholder="Task Name"
          value={taskName}
          onChange={(e) => setTaskName(e.target.value)}
          required
        />
        <input
          type="date"
          value={taskDeadline}
          onChange={(e) => setTaskDeadline(e.target.value)}
          required
        />
        <button type="submit">Add Task</button>
      </form>
      <ul>
        {project.tasks.map((task) => (
          <li key={task._id}>
            {task.name} - Deadline: {task.deadline}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ProjectDetails;
```

### Step 5: User Authentication Components

**Login Component:**

```javascript
// src/components/Login.js
import React, { useState } from 'react';
import axios from 'axios';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    const response = await axios.post('/api/auth/login', { email, password });
    // Handle login success (e.g., store token)
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="email"
        placeholder="Email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
      />
      <input
        type="password"
        placeholder="Password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />
      <button type="submit">Login</button>
    </form>
  );
};

export default Login;
```

### Step 6: Backend Setup

**Initialize the Backend**

```bash
mkdir server
cd server
npm init -y
npm install express mongoose cors body-parser bcryptjs jsonwebtoken
```

**Basic Server Setup:**

```javascript
// server/index.js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
const User = require('./models/User'); // User model
const Project = require('./models/Project'); // Project model

const app = express();
app.use(cors());
app.use(bodyParser.json());

mongoose.connect('mongodb://localhost:27017/project-management', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Routes
app.post('/api/projects', async (req, res) => {
  const project = new Project(req.body);
  await project.save();
  res.status(201).json(project);
});

app.get('/api/projects', async (req, res) => {
  const projects = await Project.find();
  res.json(projects);
});

app.get('/api/projects/:id', async (req, res) => {
  const project = await Project.findById(req.params.id);
  res.json(project);
});

app.post('/api/projects/:id/tasks', async (req, res) => {
  const project = await Project.findById(req.params.id);
  project.tasks.push(req.body);
  await project.save();
  res.status(201).json(project);
});

// User authentication routes
app.post('/api/auth/login', async (req, res) => {
  // Implement login logic
});

app.post('/api/auth/register', async (req, res) => {
  // Implement registration logic
});

// Start server
app.listen(5000, () => {
  console.log('Server is running on port 5000');
});
```

### Step 7: User and Project Models

**User Model:**

```javascript
// server/models/User.js
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
});

module.exports = mongoose.model('User', userSchema);
```

**Project Model:**

```javascript
// server/models/Project.js
const mongoose = require('mongoose');

const taskSchema = new mongoose.Schema({
  name: { type: String, required: true },
  deadline: { type: Date, required: true },
});

const projectSchema = new mongoose.Schema({
  name: { type: String, required: true },
  description: { type: String, required: true },
  tasks: [taskSchema],
});

module.exports = mongoose.model('Project', projectSchema);
```

### Step 8: User Authentication Logic

You can implement user registration and login using
